{"meta":{"id":"react-note","title":"React Note","date":"2017-02-08T11:33:00.000Z","categories":["JavaScript"],"tags":["React"]},"html":"<p>React 学习笔记。</p>\n<h2>\n            <a name=\"起步\" role=\"anchor\">\n              <span>起步</span>\n            </a>\n          </h2><h3>\n            <a name=\"安装\" role=\"anchor\">\n              <span>安装</span>\n            </a>\n          </h3><pre><code class=\"lang-bash\"><span class=\"hljs-string\">npm </span><span class=\"hljs-string\">install </span>-g <span class=\"hljs-built_in\">create-react-app</span>\n<span class=\"hljs-built_in\">create-react-app</span> <span class=\"hljs-string\">hello-world\n</span><span class=\"hljs-string\">cd </span><span class=\"hljs-string\">hello-world\n</span><span class=\"hljs-string\">npm </span><span class=\"hljs-string\">start</span>\n</code></pre>\n<p>实践：create 这一步会同时执行 <code>npm install</code> 因此有失败的可能，多尝试几次就成功了。</p>\n<p>这个程序跟 vue-loader 很像，会造出一个简单的手脚架，包含了 Babel 编译器以及打包工具等等。但是细看它的 <code>package.json</code> 文件并没有包含上述内容：</p>\n<pre><code class=\"lang-json\"><span class=\"hljs-string\">\"devDependencies\"</span>: {\n  <span class=\"hljs-string\">\"react-scripts\"</span>: <span class=\"hljs-string\">\"0.8.5\"</span>\n},\n<span class=\"hljs-string\">\"dependencies\"</span>: {\n  <span class=\"hljs-string\">\"react\"</span>: <span class=\"hljs-string\">\"^15.4.2\"</span>,\n  <span class=\"hljs-string\">\"react-dom\"</span>: <span class=\"hljs-string\">\"^15.4.2\"</span>\n}\n</code></pre>\n<p>因此，跟 vue-loader 不一样的是，react 这个手脚架把无关内容都封装了。这么做我觉得有利有弊：它让人用起来更方便，然而不可能达到直接使用原组件的自由度了。相比之下，这里我更喜欢 vue-loader 的处理方式。</p>\n<h3>\n            <a name=\"Hello-World\" role=\"anchor\">\n              <span>Hello World</span>\n            </a>\n          </h3><p>最简示例：</p>\n<pre><code class=\"lang-js\">ReactDOM.render(\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>,\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>)\n);\n</code></pre>\n<h3>\n            <a name=\"JSX-语法\" role=\"anchor\">\n              <span>JSX 语法</span>\n            </a>\n          </h3><p>JSX 是 JavaScript 的一种语法扩展，实际上可以看做是语法糖。通过编译器，以下语法：</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> element = (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"greeting\"</span>&gt;</span>\n    Hello, world!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n);\n</code></pre>\n<p>相当于：</p>\n<pre><code class=\"lang-js\">const <span class=\"hljs-literal\">element</span> = {\n  type: <span class=\"hljs-string\">'h1'</span>,\n  props: {\n    className: <span class=\"hljs-string\">'greeting'</span>,\n    children: <span class=\"hljs-string\">'Hello, world'</span>\n  }\n};\n</code></pre>\n<p>后者就是编译后的结果，JSX 语法块变成了一个对象（称之为 <code>React element</code>）。</p>\n<p>（JB 家的 IDE 已经对 JSX 语法提供了默认支持，不然这篇笔记就到此为止了）</p>\n<p>JSX 支持一些稍微高级的用法，如：</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatName</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> user.firstName + <span class=\"hljs-string\">' '</span> + user.lastName;\n}\n\n<span class=\"hljs-keyword\">const</span> user = {\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Harper'</span>,\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Perez'</span>\n};\n\n<span class=\"hljs-keyword\">const</span> element = (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>\n    Hello, {formatName(user)}!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n);\n\nReactDOM.render(\n  element,\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>)\n);\n</code></pre>\n<p>在任何地方使用 JSX：</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getGreeting</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (user) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, {formatName(user)}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, Stranger.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\n}\n</code></pre>\n"}