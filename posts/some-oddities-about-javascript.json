{"meta":{"id":"some-oddities-about-javascript","title":"JavaScript 的一些古怪之处","date":"2016-02-15T16:47:27.000Z","categories":["JavaScript"],"tags":["Error"]},"html":"<p>大概一年前在看一本介绍JavaScript与jQuery的书籍之时看到了这么一个有趣的章节，当时印象挺深刻的。现在突然回想起来了这回事，于是就重新翻出来做了个笔记。作者将这些材料归结为两类：神奇的知识点以及WTF。这里去除了与浏览器有关的部分，因为那些和JavaScript本身并没有关联。</p>\n<!--more-->\n<h2>\n            <a name=\"数据类型与定义\" role=\"anchor\">\n              <span>数据类型与定义</span>\n            </a>\n          </h2><h3>\n            <a name=\"NULL是一个对象\" role=\"anchor\">\n              <span>NULL是一个对象</span>\n            </a>\n          </h3><p>不同于C或者Java之类的语言，JavaScript的 <code>null</code> 值是一个对象。也许你会说“<code>null</code> 应该定义为一个完全没有意义的值”，也许你是对的，然并卵，事实是：</p>\n<pre><code>alert(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">//object</span>\n</code></pre><p>尽管如此，<code>null</code> 并不是任何对象的一个实例（补充：JavaScript中的所有“值”都是基本对象的实例，比如说数字是 <code>Number</code> 对象的实例，字符串是 <code>String</code> 对象的实例，所有对象都是 <code>Object</code> 对象的实例，等等）。于是我们可以理智地认为：如果 <code>null</code> 代表的是没有值，那么它就不能是任何对象的实例。因此下面的表达式应该返回 <code>false</code>：</p>\n<pre><code>alert(<span class=\"hljs-literal\">null</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>); <span class=\"hljs-comment\">//evaluates false</span>\n</code></pre><h3>\n            <a name=\"NAN是一个数字\" role=\"anchor\">\n              <span>NAN是一个数字</span>\n            </a>\n          </h3><p>你以为 <code>null</code> 是一个对象已经够离谱了吗，too young too simple！<code>NaN</code>→ Not a Number → 它是一个数字。还有更过分的呢，它甚至不等于它自身。我受到了伤害。</p>\n<pre><code>alert(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">//alerts 'Number'</span>\nalert(<span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">//evaluates false</span>\n</code></pre><p>事实上，<code>NaN</code> 不与任何值相等。如果想要判断一个值是不是 <code>NaN</code>，唯一的办法是通过调用 <code>isNaN()</code> 函数。</p>\n<h3>\n            <a name=\"空数组-FALSE\" role=\"anchor\">\n              <span>空数组==FALSE</span>\n            </a>\n          </h3><p>这个特性其实很受欢迎的呢：</p>\n<pre><code>alert(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Array</span>() == <span class=\"hljs-literal\">false</span>); //evaluates <span class=\"hljs-literal\">true</span>\n</code></pre><p>要弄明白这里面到底发生了什么事，首先要知道在JavaScript世界中<strong>真假相</strong>的概念。它在逻辑上有一些简化。</p>\n<p>作者认为最简单的理解方式是：在JavaScript的世界中，<strong>所有非布尔类型的值，它们都存在有一个内置的布尔类型标志位</strong>，当该非布尔值在要求做出布尔类型的比较时，实际上调用的是它的标志位。</p>\n<p>（我觉得理解为JavaScript有内置的比较逻辑表也是可以的吧）</p>\n<p>因为苹果没办法和梨比较，猫不能和狗比较，因此当JavaScript需要比较两种不同类型的数值时，它要做的第一件事必然是将其<strong>强转</strong>为通用的可比较的类型。<code>False</code>，<code>null</code>，<code>undefined</code>，<code>NaN</code>,空字符串以及零到最后全都会变成 <code>false</code>。不过这当然不是永久的，这种转换只在特定的表达式（布尔表达式）中生效。</p>\n<pre><code>var <span class=\"hljs-attr\">someVar</span> = <span class=\"hljs-number\">0</span>;\nalert(<span class=\"hljs-attr\">someVar</span> == <span class=\"hljs-literal\">false</span>); //evaluates <span class=\"hljs-literal\">true</span>\n</code></pre><p>以上就是一个<strong>强转</strong>的例子。</p>\n<p>至此还没有开始讨论数组的行为呢。空数组是一件非常奇特的事物，它们实际上是表示真，但如果你拿它来做布尔运算，它又是假的。我总觉得这里面隐藏着什么不可告人的秘密 (¬_¬)</p>\n<pre><code>var someVar = []; //empty<span class=\"hljs-built_in\"> array\n</span>alert(someVar == false); //evaluates true<span class=\"hljs-built_in\">\nif </span>(someVar) alert('hello'); //alert runs, so someVar evaluates to true\n</code></pre><p>为了避免类似的困扰，我们可以使用<strong>全等操作符</strong>（三个等号，同时比较类型与值）：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> someVar = <span class=\"hljs-number\">0</span>;\nalert(someVar == <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">//evaluates true – zero is a falsy</span>\nalert(someVar === <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">//evaluates false – zero is a number, not a boolean</span>\n</code></pre><p>这个问题十分广泛，这里也就不过多介绍了。如果想要深入了解其内部原理，可以阅读<a href=\"http://www.mozilla.org/js/language/E262-3.pdf\">ECMA-262标准之11.9.3章节</a>文档。</p>\n<h2>\n            <a name=\"正则表达式\" role=\"anchor\">\n              <span>正则表达式</span>\n            </a>\n          </h2><h3>\n            <a name=\"REPLACE-可以接受回调函数\" role=\"anchor\">\n              <span>REPLACE()可以接受回调函数</span>\n            </a>\n          </h3><p>这绝对是JavaScript最为隐秘的特性之一，从1.3版本之后加入。绝大多数人都是这么用它的：</p>\n<pre><code>alert('<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">52</span>'.replace(/\\d+/g, '*')); <span class=\"hljs-comment\">//replace all numbers with *</span>\n</code></pre><p>（原文中有一些疏忽，比如使用了 <code>d+</code> 而非 <code>\\d+</code>，这里均做出了修正）</p>\n<p>简单的替换，字符串，星号。但如果我们想要更进一步的控制呢？比如我们只想替换30以下的数字？这个逻辑通过正则来实现会较为困难，毕竟它不是数学运算，我们可以这样：</p>\n<pre><code>alert(<span class=\"hljs-string\">'10 13 21 48 52'</span>.replace(<span class=\"hljs-regexp\">/\\d+/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">match</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(match) &lt; <span class=\"hljs-number\">30</span> ? <span class=\"hljs-string\">'*'</span> : match;\n}));\n</code></pre><p>这段代码的意思是，如果匹配到的字符串转换为整型数值后小于30，则替换为星号，否则原样返回。</p>\n<h3>\n            <a name=\"不仅仅是比较和替换\" role=\"anchor\">\n              <span>不仅仅是比较和替换</span>\n            </a>\n          </h3><p>通常情况下我们都只用到了正则表达式的比较和替换功能，但其实JavaScript提供的方法远远不止两个。</p>\n<p>比如说 <code>test()</code> 函数，它和比较十分类似，但它不反回比较值，只确认字符串是否匹配。这样代码可以更轻一些。</p>\n<pre><code>alert(<span class=\"hljs-regexp\">/\\w{3,}/</span>.test(<span class=\"hljs-string\">'Hello'</span>)); <span class=\"hljs-regexp\">//</span>alerts <span class=\"hljs-string\">'true'</span>\n</code></pre><p>以上表达式判断了字符串是否有3个或以上的字符。</p>\n<p>还有就是 <code>RegExp</code> 对象，通过它我们可以构建动态的正则表达式。一般情况下正则表达式都是通过短格式声明的（封闭在斜杠中，就像上面所用到的）。这么做的话，我们不能在其中插入变量。当然，我们还有 <code>RegExp</code>：</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findWord</span>(<span class=\"hljs-params\">word, string</span>) </span>{\n    <span class=\"hljs-built_in\">var</span> instancesOfWord = <span class=\"hljs-built_in\">string</span>.match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'\\\\b'</span>+word+<span class=\"hljs-string\">'\\\\b'</span>, <span class=\"hljs-string\">'ig'</span>));\n    alert(instancesOfWord);\n}\nfindWord(<span class=\"hljs-string\">'car'</span>, <span class=\"hljs-string\">'Carl went to buy a car but had forgotten his credit card.'</span>);\n</code></pre><p>这里我们基于 <code>word</code> 参数构建了一个动态的正则表达式。这个函数会返回car作为独立单词在字符串中出现的次数。本例只有一次。</p>\n<p>由于 <code>RegExp</code> 使用字符串来表示正则表达式，而非斜杠，因此我们可以在里面插入变量。但是，与此同时，需要注意的是，表达式中特殊符号前的反斜杠我们也要写两次（转义处理）。</p>\n<h2>\n            <a name=\"函数与作用域\" role=\"anchor\">\n              <span>函数与作用域</span>\n            </a>\n          </h2><h3>\n            <a name=\"你可以伪造作用域\" role=\"anchor\">\n              <span>你可以伪造作用域</span>\n            </a>\n          </h3><p>作用域决定了变量可以在哪些地方被访问。独立（即不在函数内部）的JavaScript可以在全局作用域（对浏览器来说是 <code>window</code> 对象）下访问，函数内部定义的变量则只能在内部访问，其对外部不可见。</p>\n<pre><code><span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'dog'</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAnimal</span><span class=\"hljs-params\">(adjective)</span> </span>{ alert(adjective+<span class=\"hljs-string\">' '</span>+<span class=\"hljs-keyword\">this</span>.animal); }\ngetAnimal(<span class=\"hljs-string\">'lovely'</span>); <span class=\"hljs-comment\">//alerts 'lovely dog';</span>\n</code></pre><p>这里，我们的变量和函数都是在全局作用域下定义的（比如 <code>window</code>）。因为 <code>this</code> 总是指向当前作用域，因此在本例中它指向了 <code>window.animal</code>，于是就找到了。一切看起来都没问题。但是，我们可以骗过函数本身，让它认为自己执行在另一个作用域下，并无视其原本的作用域。我们通过调用内置的 <code>call()</code> 函数来达到目的：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> animal = <span class=\"hljs-string\">'dog'</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAnimal</span><span class=\"hljs-params\">(adjective)</span> </span>{ alert(adjective+<span class=\"hljs-string\">' '</span>+<span class=\"hljs-keyword\">this</span>.animal); };\n<span class=\"hljs-keyword\">var</span> myObj = {animal: <span class=\"hljs-string\">'camel'</span>};\ngetAnimal.call(myObj, <span class=\"hljs-string\">'lovely'</span>); <span class=\"hljs-comment\">//alerts 'lovely camel'</span>\n</code></pre><p>在这里，函数不在 <code>window</code> 而在 <code>myObj</code> 中运行 — 作 为 <code>call</code> 方法的第一个参 数。本质上说 <code>call</code> 方法将函数 <code>getAnimal</code> 看成 <code>myObj</code> 的一个方法（如果没看懂这是什么意思， 你可能需要去看一下 JavaScrip t的原型继承系统相关内容）。注意，我们传递给 <code>call</code> 的第一个参数后面的参数都会被传递给我们的函数 — 因此我们将 lovely 作为相关参数传递进来。尽管好的代码设计不需要采用这种伪造手段，这依然是非常有趣的知识。<code>apply</code> 函数与 <code>call</code> 函数作用相似，它的参数应该被指定为数组。所以，上面的例子如果用 <code>apply</code> 函数的话如下：</p>\n<pre><code>getAnimal.apply(myObj, [<span class=\"hljs-string\">'lovely'</span>]); <span class=\"hljs-regexp\">//</span><span class=\"hljs-keyword\">func</span> args sent as array\n</code></pre><h3>\n            <a name=\"函数可以自执行\" role=\"anchor\">\n              <span>函数可以自执行</span>\n            </a>\n          </h3><p>显然：</p>\n<pre><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ alert(<span class=\"hljs-string\">'hello'</span>); })(); <span class=\"hljs-comment\">//alerts 'hello'</span>\n</code></pre><p>这个语法非常简单：我们定义了一个函数，然后立刻就调用了它，就像调用其它函数一样。也许你会觉得这有些奇怪，函数包含的代码一般都是在之后执行的，比如我们想在某个时刻调用它，既然它需要立即执行，那为什么要把代码放在函数体内呢？</p>\n<p>自执行函数的一大用处就是将<strong>变量的当前值</strong>绑定到将来要被执行的函数中去。就比如说回调，延迟或者持续运行：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> someVar = <span class=\"hljs-string\">'hello'</span>;\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ alert(someVar); }, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">var</span> someVar = <span class=\"hljs-string\">'goodbye'</span>;\n</code></pre><p>这段代码有一个问题，它的输出永远都是goodbye而不是hello，这是因为timeout中的函数在真正执行之前永远不会去关心里面的变量发生了什么变化，到那时候，<code>someVar</code> 早就被goodbye覆盖了。</p>\n<p>（JavaScript新手经常会犯的一个错误就是在循环中定义事件，并且将index作为参数传入，到最后发现真正绑上了事件的只有最后的那个元素，这也是同理）</p>\n<p>解决办法如下：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> someVar = <span class=\"hljs-string\">'hello'</span>;\nsetTimeout((<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(someVar)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span>  </span>{ alert(someVar); }\n})(someVar), <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">var</span> someVar = <span class=\"hljs-string\">'goodbye'</span>;\n</code></pre><p>在这里，被传入函数中的相当于是一个快照，而不是真正的变量本身。</p>\n<h2>\n            <a name=\"其它\" role=\"anchor\">\n              <span>其它</span>\n            </a>\n          </h2><h3>\n            <a name=\"0-1-+-0-2-0-3\" role=\"anchor\">\n              <span>0.1 + 0.2 !== 0.3</span>\n            </a>\n          </h3><p>其实这是计算机科学中的一个普遍问题，我已经在很多编程语言中都发现了它的影子，它是由浮点数不能做到完全精确导致的。实际的计算结果是0.30000000000000004</p>\n<p>如何解决，归根到底取决于计算需求：</p>\n<ul>\n<li>转换成整型计算，而后再转回浮点</li>\n<li>允许某个范围内的误差</li>\n</ul>\n<p>因此，与其：</p>\n<pre><code>var <span class=\"hljs-attr\">num1</span> = <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-attr\">num2</span> = <span class=\"hljs-number\">0.2</span>, <span class=\"hljs-attr\">shouldEqual</span> = <span class=\"hljs-number\">0.3</span>;\nalert(num1 + <span class=\"hljs-attr\">num2</span> == shouldEqual); //<span class=\"hljs-literal\">false</span>\n</code></pre><p>不如：</p>\n<pre><code>alert(<span class=\"hljs-name\">num1</span> + num2 &gt; shouldEqual - <span class=\"hljs-number\">0.001</span> <span class=\"hljs-symbol\">&amp;&amp;</span> num1 + num2 &lt; shouldEqual + <span class=\"hljs-number\">0.001</span>)<span class=\"hljs-comment\">; //true</span>\n</code></pre><p>这就是一个简单的允许误差的办法。</p>\n<h3>\n            <a name=\"UNDEFINED可以被DEFINED\" role=\"anchor\">\n              <span>UNDEFINED可以被DEFINED</span>\n            </a>\n          </h3><p>这个看起来有点蠢了。undefined在JavaScript中其实不是一个关键字，尽管它一般是用来表示一个变量是否未被定义。就像这样：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> someVar;\nalert(someVar == <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">//evaluates true</span>\n</code></pre><p>然而也可以这样：</p>\n<pre><code><span class=\"hljs-attribute\">undefined</span> = <span class=\"hljs-string\">\"I'm not undefined!\"</span><span class=\"hljs-comment\">;</span>\nvar someVar<span class=\"hljs-comment\">;</span>\nalert(someVar == undefined)<span class=\"hljs-comment\">; //evaluates false!</span>\n</code></pre><p>看起来很有趣的样子&#8230;&#8230;</p>\n"}