[{"meta":{"id":"github-pages-and-ssl","title":"Github Pages and SSL","date":"2016-12-08T17:00:00.000Z","categories":["Personal"],"tags":["Github","SSL"],"excerpt":"<p>经过一些努力，把博客迁移到了 Github Pages，将域名改成了自定义，并且成功启用了 SSL，以下是步骤（就不截图了）。</p>\n<h2>\n            <a name=\"部署代码\" role=\"anchor\">\n              <span>部署代码</span>\n            </a>\n          </h2><p>Github Pages 支持两种级别的部署：</p>\n<ol>\n<li><strong>user / organization</strong> 方式<ul>\n<li>repo 名字必须为 <code>&lt;user-name or org-name&gt;.github.io</code></li>\n<li>pages build branch 固定为 <code>master</code></li>\n<li>部署后的发布域名即为 repo 名</li>\n</ul>\n</li>\n<li><strong>project</strong> 方式<ul>\n<li>repo 名字没有限制</li>\n<li>pages build branch 可以任意指定</li>\n<li>发布域名为 <code>&lt;user-name or org-name&gt;.github.io/&lt;project-name&gt;</code></li>\n</ul>\n</li>\n</ol>\n<p>因此，如果要做个人页面则必然选择第一种方式。</p>\n<p>因为 build branch 限制为 master，因此我一开始选择了重建 repo，实际上没有必要，可以直接 rename 旧的 repo</p>\n<p>rename 后，到 repo settings -&gt; options -&gt; Github Pages，即可发现自动部署已经开始了。即刻访问 <code>&lt;user-name or org-name&gt;.github.io</code> 可以看到部署结果。</p>\n<h2>\n            <a name=\"自定义域名\" role=\"anchor\">\n              <span>自定义域名</span>\n            </a>\n          </h2><ol>\n<li>在 repo settings -&gt; options -&gt; Github Pages -&gt; Custom Domain 中，填入自己的域名，如 <code>wxsm.space</code>，保存</li>\n<li>在自己的域名供应商处修改域名解析，添加两条 A 记录（此处可以参考最新<a href=\"https://help.github.com/articles/setting-up-an-apex-domain/\">文档</a>）：<ul>\n<li><code>192.30.252.153</code></li>\n<li><code>192.30.252.154</code></li>\n</ul>\n</li>\n<li>等待记录生效</li>\n</ol>\n<p>过一会就可以发现，使用自定义域名可以访问网站了，并且原 <code>&lt;user-name or org-name&gt;.github.io</code> 会重定向到自定义域名。</p>\n<h2>\n            <a name=\"启用-SSL\" role=\"anchor\">\n              <span>启用 SSL</span>\n            </a>\n          </h2><p>这里是最麻烦的。虽然 Github Pages 原生支持 SSL，但是只针对 <code>*.github.io</code> 域名，对于自定义域名，无法直接启用。因此需要找一个支持 SSL 的 CDN 供应商。考虑到免费这个关键因素，选择了 CloudFlare（以下简称 CF）</p>\n<ol>\n<li>前往 CF 官网，注册账号，填入自己的域名，点几个 Continue</li>\n<li>到注册的最后一步时，需要将域名的 DNS 服务器切换为 CF 服务器（CF 会提供两个，两个都要填上），到原域名供应商处修改域名 DNS 服务器即可，24 小时内生效</li>\n<li>生效后可以打开网站查看是否正常。控制台页面上方有一个 Crypto Tab，点开，SSL 选择 <code>Flexible</code> 或者 <code>Full</code>，同样需要等待一段时间生效</li>\n<li>生效后即可以通过 <code>https</code> 访问网站了，如果需要强制 SSL，可以到 Page Rules Tab，添加一些记录，为某些域名段设置强制 SSL <code>Aways use https</code></li>\n</ol>\n"}},{"meta":{"id":"d3-note-interpolate","title":"D3 Note - Interpolate","date":"2016-12-05T14:17:00.000Z","categories":["JavaScript"],"tags":["D3"],"excerpt":"<p><code>d3-interpolate</code> 是 D3 的核心模块之一，与比例尺有些类似，<code>interpolate</code> （插值）所做的也是一些数值映射的工作。区别是，<code>interpolate</code> 的定义域始终是 <strong>0 ~ 1</strong>，并且始终为线性的。所以，更多时候它用来与 D3 的一些其他模组集成使用（如 transition, scale 等）。</p>\n<p>举个例子：</p>\n<pre><code class=\"lang-js\">let i = d3.interpolateNumber(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// 10 as a, and 20 as b</span>\ni(<span class=\"hljs-number\">0.0</span>); <span class=\"hljs-comment\">// 10</span>\ni(<span class=\"hljs-number\">0.2</span>); <span class=\"hljs-comment\">// 12</span>\ni(<span class=\"hljs-number\">0.5</span>); <span class=\"hljs-comment\">// 15</span>\ni(<span class=\"hljs-number\">1.0</span>); <span class=\"hljs-comment\">// 20</span>\n</code></pre>\n<p>返回的函数 <code>i</code> 称作 <code>interpolator</code> （插值器）。给定值域 <strong>a</strong> 与 <strong>b</strong>，并且传入 <strong>[0, 1]</strong> 这个闭区间内的任意值，插值器将返回对应的结果。通常情况下，<strong>a 对应参数 0，b 对应参数 1</strong></p>\n<p>跟比例尺一样，插值器也可以接受其他类型的参数，如：</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-selector-tag\">d3</span><span class=\"hljs-selector-class\">.interpolateLab</span>(<span class=\"hljs-string\">\"steelblue\"</span>, <span class=\"hljs-string\">\"brown\"</span>)(<span class=\"hljs-number\">0.5</span>); <span class=\"hljs-comment\">// \"rgb(142, 92, 109)\"</span>\n</code></pre>\n<p>甚至对象、数组：</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> i = d3.interpolate({colors: [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>]}, {colors: [<span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"black\"</span>]});\ni(<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>); // {colors: [<span class=\"hljs-string\">\"rgb(255, 0, 0)\"</span>, <span class=\"hljs-string\">\"rgb(0, 0, 255)\"</span>]}\ni(<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>); // {colors: [<span class=\"hljs-string\">\"rgb(255, 128, 128)\"</span>, <span class=\"hljs-string\">\"rgb(0, 0, 128)\"</span>]}\ni(<span class=\"hljs-number\">1.0</span>); // {colors: [<span class=\"hljs-string\">\"rgb(255, 255, 255)\"</span>, <span class=\"hljs-string\">\"rgb(0, 0, 0)\"</span>]}\n</code></pre>\n<h2>\n            <a name=\"d3-interpolate\" role=\"anchor\">\n              <span>d3.interpolate</span>\n            </a>\n          </h2><p><code>interpolate</code> 模块提供了很多子方法，然而，大多数情况下，直接调用这个就足够了。因为 D3 会根据传入的数据类型自动匹配子方法（注意：是基于参数 <strong>b</strong> 的数据类型）。</p>\n<p>决定算法：</p>\n<ol>\n<li>如果 b 是 <code>null</code>, <code>undefined</code> 或 <code>boolean</code>，则函数返回的是常量 b</li>\n<li>如果 b 是数字，则使用 <code>interpolateNumber</code> 方法</li>\n<li>如果 b 是颜色或者可以转换为颜色的字符串，则使用 <code>interpolateRgb</code> 方法</li>\n<li>如果 b 是时间，则使用 <code>interpolateDate</code> 方法</li>\n<li>如果 b 是字符串，则使用 <code>interpolateString</code> 方法</li>\n<li>如果 b 是数组，则使用 <code>interpolateArray</code> 方法</li>\n<li>如果 b 可以强转为数字，则使用 <code>interpolateNumber</code> 方法</li>\n<li>使用 <code>interpolateObject</code> 方法</li>\n<li>基于 b 的类型，将 a 强转为相同类型</li>\n</ol>\n<p>各个方法可以直接查看文档获取用法，大同小异。比较有趣的是 <code>interpolateString</code>，它可以检测字符串中的数字，并且做类似这样的事情：</p>\n<blockquote>\n<p>For example, if a is &quot;300 12px sans-serif&quot;, and b is &quot;500 36px Comic-Sans&quot;, two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (&quot; &quot;), and the suffix (&quot;px Comic-Sans&quot;). The result of the interpolator at t = 0.5 is &quot;400 24px Comic-Sans&quot;.</p>\n</blockquote>\n<p>至于插值函数的用处，比较多，举一个例子：<strong>d3-transition</strong> 有一些平滑动画的实现函数需要用到插值，比如说地球的动画滚动效果：</p>\n<pre><code class=\"lang-js\">d3.transition()\n  .duration(<span class=\"hljs-number\">1000</span>)\n  .tween(<span class=\"hljs-string\">'rotate'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    let r = d3.interpolate(projection.rotate(), [-geo[<span class=\"hljs-number\">0</span>], -geo[<span class=\"hljs-number\">1</span>]])\n    <span class=\"hljs-keyword\">return</span> (t) =&gt; {\n      rotateGlobeByAngle(r(t))\n    }\n  })\n  .<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n     <span class=\"hljs-regexp\">//</span> <span class=\"hljs-keyword\">do</span> something...        \n  })\n</code></pre>\n"}},{"meta":{"id":"d3-note-scale","title":"D3 Note - Scale","date":"2016-11-22T09:00:00.000Z","categories":["JavaScript"],"tags":["D3"],"excerpt":"<p>之前做的柱状图例子：</p>\n<pre><code class=\"lang-js\">let data = [<span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">210</span>, <span class=\"hljs-number\">170</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">190</span>]\n\nlet rectWidth = <span class=\"hljs-number\">25</span>\n\nsvg.selectAll(<span class=\"hljs-string\">'rect'</span>)\n .data(data)\n .enter()\n .append(<span class=\"hljs-string\">'rect'</span>)\n .attr(<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(d, i)</span> =&gt;</span> height - d)\n .attr(<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(d, i)</span> =&gt;</span> i * rectWidth)\n .attr(<span class=\"hljs-string\">'height'</span>, d =&gt; d)\n .attr(<span class=\"hljs-string\">'width'</span>, rectWidth - <span class=\"hljs-number\">2</span>)\n .attr(<span class=\"hljs-string\">'fill'</span>, <span class=\"hljs-string\">'steelblue'</span>)\n</code></pre>\n<p>有一个严重的问题，就是没有比例尺的概念，柱状图的高度完全由数据转换成像素值来模拟。这明显是不科学的：如果数据的值过小或过大，作出来的图就会很奇怪，同时也无法做到非线性的映射。</p>\n<p>就跟地图需要比例尺一样，绝大多数的数据图表也需要比例尺。</p>\n<blockquote>\n<p>Scales are a convenient abstraction for a fundamental task in visualization: mapping a dimension of abstract data to a visual representation.</p>\n</blockquote>\n<p><strong>比例尺 - Scale - “将某个维度的抽象数据做可视化映射”</strong></p>\n<p>至于可视化映射的具体实现，<code>d3-scale</code> 模块提供了许多方案，大致可以分为两类：</p>\n<ul>\n<li>Continuous Scales（连续映射）</li>\n<li>Ordinal Scales（散点映射）</li>\n</ul>\n"}},{"meta":{"id":"static-blog-built-with-vue","title":"Static Blog Built with Vue","date":"2016-11-16T16:55:00.000Z","categories":["Personal"],"excerpt":"<p>博客再次迁移，这次是从 Wordpress 转向静态博客（自建）。</p>\n<p>技术栈:</p>\n<ul>\n<li>前端：vue + vue-router + vuex + bootstrap + webpack</li>\n<li>服务端：没有</li>\n<li>数据库：没有</li>\n</ul>\n<p>整站打包后，一次加载所有资源（HTML + CSS + JS + DATA）300K 不到（gzip 后 80K+），秒速渲染，与先前真的是天差地别。</p>\n<p>图片资源从本地服务器搬迁到免费云。 写作使用 Markdown，从此 IDE 写博客不是梦。</p>\n<p>代码地址：<a href=\"https://github.com/wxsms/wxsms.github.io/tree/src\">https://github.com/wxsms/wxsms.github.io/tree/src</a></p>\n"}},{"meta":{"id":"d3-note-enter-update-and-exit","title":"D3 Note - Enter, Update and Exit","date":"2016-11-10T11:43:10.000Z","categories":["JavaScript"],"tags":["D3"],"excerpt":"<p>在 D3 的使用过程中，我们见得最多的应当是类似如下的代码：</p>\n<pre><code><span class=\"hljs-keyword\">let</span> div = d3.select(<span class=\"hljs-string\">'body'</span>)\n  .selectAll(<span class=\"hljs-string\">'p'</span>)\n  .data([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">15</span>])\n  .enter()\n  .append(<span class=\"hljs-string\">'p'</span>)\n  .text(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d);\n</code></pre><p>将得到：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>15<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre><p>光看代码完全不能理解 D3 到底做了些什么，其实这里关键是 <code>enter</code> 的使用。</p>\n"}},{"meta":{"id":"webpack-hmr-not-work-in-idea","title":"Webpack HMR Not Work in IDEA","date":"2016-11-07T09:44:41.000Z","categories":["IDE"],"tags":["IntelliJ-IDEA","Webpack"],"excerpt":"<ol>\n<li>goto &#39;File | Settings | Appearance &amp; Behavior | System Settings&#39;;</li>\n<li>uncheck &#39;Use save write&#39; option</li>\n</ol>\n<p><img src=\"/static/images/hmr-idea-issue.jpg\" alt=\"\"></p>\n<p>Problem solved.</p>\n"}},{"meta":{"id":"node-js-web-spider-note-2","title":"Node.js Web Spider Note - 2","date":"2016-11-05T14:45:26.000Z","categories":["JavaScript"],"tags":["NodeJs","Spider"],"excerpt":"<h2>\n            <a name=\"Cookie-amp-Session\" role=\"anchor\">\n              <span>Cookie &amp; Session</span>\n            </a>\n          </h2><p>HTTP 是一种无状态协议，服务器与客户端之间储存状态信息主要靠 Session，但是，Session 在浏览器关闭后就会失效，再次开启先前所储存的状态都会丢失，因此还需要借助 Cookie</p>\n<p>一般来说，网络爬虫不是浏览器，因此，只能靠手动记住 Cookie 来与服务器“保持联系”。</p>\n<h3>\n            <a name=\"Cookie\" role=\"anchor\">\n              <span>Cookie</span>\n            </a>\n          </h3><p>Cookie 是 HTTP 协议的一部分，处理流程为：</p>\n<ul>\n<li>服务器向客户端发送 cookie <ul>\n<li>通常使用 HTTP 协议规定的 set-cookie 头操作</li>\n<li>规范规定 cookie 的格式为 name = value 格式，且必须包含这部分</li>\n</ul>\n</li>\n<li>浏览器将 cookie 保存</li>\n<li>每次请求浏览器都会将 cookie 发向服务器</li>\n</ul>\n<p>因此，爬虫要做的工作就是模拟浏览器，识别服务端发来的 Cookie 并保存，之后每次请求都带上 Cookie 头。</p>\n<p>在 Node.js 中有很多与 Cookie 处理相关的 package，就不再赘述。</p>\n<h3>\n            <a name=\"Session\" role=\"anchor\">\n              <span>Session</span>\n            </a>\n          </h3><p>Cookie 虽然方便，但是由于保存在客户端，可保存的长度有限，且可以被伪造。因此，为了解决这些问题，就有了 Session</p>\n<p>区别：</p>\n<ul>\n<li>Cookie 保存在客户端</li>\n<li>Session 保存在服务端</li>\n</ul>\n<p>Cookie 与 Session 储存的都是客户端与服务器之间的会话状态信息，它们之间主要靠一个秘钥来进行匹配，称之为 <code>SESSION_ID</code> ，如 express 中默认为 <code>connect.sid</code> 字段。只要浏览器发出的 SESSION_ID 与服务器储存的字段匹配上，那么服务器就将其认作为一个 Session，只要 SESSION_ID 的长度足够大，几乎是不可能被伪造的。因此，敏感信息储存在 Session 中要比 Cookie 安全得多。</p>\n<p>常见的 Session 存放媒介有：</p>\n<ul>\n<li>RAM</li>\n<li>Database</li>\n<li>Cache (e.g. Redis)</li>\n</ul>\n<p>Session 不是爬虫可以接触到的东西。</p>\n<h2>\n            <a name=\"AJAX-页面\" role=\"anchor\">\n              <span>AJAX 页面</span>\n            </a>\n          </h2><p>对于静态页面（服务端渲染），使用爬虫不需要考虑太多，把页面抓取下来解析即可。但对于客户端渲染，尤其是前后端完全分离的网站，一般不能直接获取页面（甚至没有必要获取页面），而是转而分析其实际请求内容。</p>\n<h3>\n            <a name=\"请求分析\" role=\"anchor\">\n              <span>请求分析</span>\n            </a>\n          </h3><p>通过一些请求拦截分析工具（如 Chrome 开发者工具）可以截获网站向服务器发送的所有请求以及相应的回复。</p>\n<p>包括（不限于）以下信息：</p>\n<ul>\n<li>请求地址</li>\n<li>请求方法（GET / POST 等）</li>\n<li>所带参数</li>\n<li>请求头</li>\n</ul>\n<p>只要把信息尽数伪造，那么爬虫发出的请求照样可以从服务器取得正确的结果。</p>\n<h3>\n            <a name=\"秘钥处理\" role=\"anchor\">\n              <span>秘钥处理</span>\n            </a>\n          </h3><p>一些请求中会带有秘钥（token / sid / secret），可能随除了请求方法外的任一个位置发出，也可能都带有秘钥。更可能不止一个秘钥。</p>\n<p>理论上来说，正常客户端取得秘钥有两种方式：</p>\n<ul>\n<li>服务端提供</li>\n<li>客户端自行计算，由服务端校对</li>\n</ul>\n<p>对于服务端提供给客户端的秘钥，只要仔细分析 HTML 或服务端返回的 Cookie Header 就一定能发现。</p>\n<p>而对于客户端自行计算的秘钥则比较麻烦了，尤其是在 JS 代码加密、混淆的情况下。这种时候，只能自己去用开发者工具调试原始站点代码，找出加密代码段，并在爬虫中实现。这里面有许多技巧，如各种断点、单步调试等。</p>\n<h2>\n            <a name=\"表单处理\" role=\"anchor\">\n              <span>表单处理</span>\n            </a>\n          </h2><p>表单实际上也是 HTTP 请求，使用 GET / POST 等方法即可模拟表单提交。然而这不是重点。重点是表单常常伴随着验证码而存在。</p>\n<p>验证码的识别暂未涉及。</p>\n<h2>\n            <a name=\"浏览器模拟\" role=\"anchor\">\n              <span>浏览器模拟</span>\n            </a>\n          </h2><p>爬虫的下下策才是使用浏览器完全模拟用户操作。实在是属于无奈之举。Nodejs 可以驱动 Chrome 与 Firefox 浏览器，存在相应的 Package，但是，更方便的是使用各种 E2E Testing 工具。</p>\n<p>比如 Night Watch JS：</p>\n<pre><code><span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-string\">'Demo test Google'</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(client)</span></span> {\n client\n .url(<span class=\"hljs-string\">'http://www.google.com'</span>)\n .waitForElementVisible(<span class=\"hljs-string\">'body'</span>, <span class=\"hljs-number\">1000</span>)\n .<span class=\"hljs-built_in\">assert</span>.title(<span class=\"hljs-string\">'Google'</span>)\n .<span class=\"hljs-built_in\">assert</span>.visible(<span class=\"hljs-string\">'input[type=text]'</span>)\n .setValue(<span class=\"hljs-string\">'input[type=text]'</span>, <span class=\"hljs-string\">'rembrandt van rijn'</span>)\n .waitForElementVisible(<span class=\"hljs-string\">'button[name=btnG]'</span>, <span class=\"hljs-number\">1000</span>)\n .click(<span class=\"hljs-string\">'button[name=btnG]'</span>)\n .pause(<span class=\"hljs-number\">1000</span>)\n .<span class=\"hljs-built_in\">assert</span>.containsText(<span class=\"hljs-string\">'ol#rso li:first-child'</span>,\n <span class=\"hljs-string\">'Rembrandt - Wikipedia'</span>)\n .<span class=\"hljs-keyword\">end</span>();\n }\n};\n</code></pre><p>在这种模式下，Cookie / Session / 请求等各种细节都不用关心了。只需要按部就班地执行操作即可。模拟浏览器的代价是效率太低，内存开销大，但在某些特定需求情况下，却比一般爬虫要简单得多。</p>\n<p>&nbsp;</p>\n"}},{"meta":{"id":"d3-note-basis","title":"D3 Note - Basis","date":"2016-10-25T10:40:44.000Z","categories":["JavaScript"],"tags":["D3"],"excerpt":"<p>D3 (Data-Driven Documents) 是一个 JavaScript Library，用来做 Web 端的数据可视化实现以及各种绘图。</p>\n<blockquote>\n<p><strong>D3.js</strong> is a JavaScript library for manipulating documents based on data. <strong>D3</strong> helps you bring data to life using HTML, SVG, and CSS.</p>\n</blockquote>\n<p>学习 D3 需要很多预备知识：</p>\n<ol>\n<li>HTML / DOM</li>\n<li>CSS</li>\n<li>JavaScript (better with jQuery)</li>\n<li>SVG</li>\n</ol>\n<p>HTML / CSS 不必多说，因为 D3 含有大量链式操作函数以及选择器等，因此如果有 jQuery 基础将轻松很多。此外，由于一般采用 SVG 方式进行绘图，所以 SVG 基础知识也需要掌握。</p>\n<p>虽然必须的预备知识如此之多，但 D3 的定位其实是 Web 前端绘图的底层工具，所谓底层，即是操作复杂而功能强大者。</p>\n"}},{"meta":{"id":"2-days-in-hk","title":"香港两日游","date":"2016-10-13T10:57:52.000Z","categories":["Personal"],"excerpt":"<p>工作原因，国庆前去了一趟香港。</p>\n<p>当天早上 7 点多从珠海九州港出发，搭船到香港中港城，行程一小时十分钟。住一晚后第二天下班再从中环港澳码头搭船回到九州港，约一小时。</p>\n<p>公司在新界科学园，住所位于沙田，吃、住、行均由公司报销，相比于平时来说感觉像是极尽奢侈的两天。但是，虽然吃的东西贵且有特色，却并不怎么觉得好吃。或者说符合中国人口味的不多。</p>\n<p>和珠海有些不同的是，那边的科技园启动电梯是需要刷工作卡的，某个公司的卡只能去到该公司的楼层。进厕所（女厕）也是需要刷卡的（不知道会不会有卡的持有者必须是女性这样的设定）。感觉就是严格了很多。公司的门禁卡不用刷，只需要人持卡走到门前自然就开了。不知道是什么原理。</p>\n<p>公司里面有免费自动咖啡机，各种口味以及糖度，出于好奇玩了两次。</p>\n<p>科学园的建筑大量使用了玻璃和银色调，同事说像南方软件园的升级版，我觉得这个差距还是有点遥远的。</p>\n<p>住的地方附近有一个新城市广场，晚上下班了就去那里购物。酒店提供 100M 网速的无限制 WIFI，秒上 Google 的感觉和国内真的差了太远。</p>\n<p>去港澳码头途中，的士 FM 在播一个鬼故事，大意是一个的士司机晚上搭了一个客，却莫名其妙变成两个，且从此以后都一直能从后视镜里面看到另外一个人。后来的士司机就在后视镜上贴了一道符。</p>\n<p>结果，在路上就刚好看到一辆车后视镜贴了符的，我们的司机好笑地指着它说：</p>\n<p>呐，符啊。</p>\n<p>然而另外两名同事估计是心不在焉或者听不懂粤语，只有我觉得好笑。</p>\n"}},{"meta":{"id":"new-phone","title":"换了手机","date":"2016-09-26T16:22:42.000Z","categories":["Personal"],"excerpt":"<p>旧的 iPhone 5 用了两年，存在以下问题：</p>\n<ol>\n<li>耳机插孔坏，插任何耳机都只响一边</li>\n<li>一天三充，有时候还越充越少</li>\n<li>摄像头进灰 + 底部螺丝滑丝，拍照有颗粒，同时无法拆开清洁</li>\n<li>静音开关接触不良，有时会自动无限切换</li>\n<li>不断升级 iOS 后越来越卡，应用无法多开</li>\n<li>16G 存储空间</li>\n<li>没有指纹识别，解锁浪费大量时间，又不能不加密码</li>\n</ol>\n<p>纠结了很久，终于狠下心来买了新手机（主要是因为旧机虽然问题多多，但没有一个是致命伤）。本来打算买 SE 的，看到官网有无息分期后觉得还是 7 比较值。</p>\n<p>官网预定，一周到货：</p>\n<p><img src=\"/static/images/IMG_1269.jpg\" alt=\"\"></p>\n"}},{"meta":{"id":"wordpress-hole-record","title":"WordPress 掉坑记录","date":"2016-09-20T15:14:47.000Z","categories":["CMS"],"tags":["Wordpress"]}},{"meta":{"id":"node-js-web-spider-note-1","title":"Node.js Web Spider Note - 1","date":"2016-09-10T23:12:05.000Z","categories":["JavaScript"],"tags":["ES6","Spider"]}},{"meta":{"id":"javascript-promise","title":"JavaScript Promise","date":"2016-09-05T17:27:26.000Z","categories":["JavaScript"],"tags":["Async","ES6","Promise"]}},{"meta":{"id":"using-excerpt-in-wp-2016-theme","title":"WP 2016 主题使用摘要","date":"2016-08-31T17:15:31.000Z","categories":["CMS"],"tags":["Wordpress"]}},{"meta":{"id":"token-apps-usage-experiences","title":"令牌软件使用体验","date":"2016-08-29T16:22:07.000Z","categories":["Personal","Review"]}},{"meta":{"id":"2016-08-25","title":"2016-08-25","date":"2016-08-25T19:17:54.000Z","categories":["Personal"]}},{"meta":{"id":"untitled-3","title":"无题","date":"2016-08-04T10:15:11.000Z","categories":["Personal"]}},{"meta":{"id":"solution-to-windows-cant-remove-node-modules-folder","title":"Windows 无法删除 Node_modules 文件夹的解决方案","date":"2016-07-28T16:56:40.000Z","categories":["JavaScript"],"tags":["NodeJs","Windows"]}},{"meta":{"id":"deleted-a-game","title":"删除了一个游戏","date":"2016-07-27T15:13:22.000Z","views":["21"],"categories":["Personal"]}},{"meta":{"id":"wordpress-change-admin-panel-font","title":"WordPress 更改后台字体为雅黑","date":"2016-05-25T19:33:45.000Z","categories":["CMS"],"tags":["CSS","Wordpress"]}},{"meta":{"id":"mean-js-use-forever-to-prevent-app-crash","title":"MEAN.JS 搭配 forever 使用以防止 app crash","date":"2016-05-19T15:24:46.000Z","categories":["JavaScript"],"tags":["Grunt","MEAN-Stack","NodeJs"]}},{"meta":{"id":"some-project-memo","title":"记一次项目经历","date":"2016-04-05T14:47:06.000Z","categories":["Personal"]}},{"meta":{"id":"javascript-event-delegation","title":"JavaScript 事件代理","date":"2016-04-01T11:38:12.000Z","categories":["JavaScript"]}},{"meta":{"id":"efficient-css-and-reflow-repaint","title":"高效 CSS 与 Reflow & Repaint","date":"2016-03-30T14:16:25.000Z","categories":["CSS"]}},{"meta":{"id":"bfc-theory-and-applications","title":"BFC 原理及应用","date":"2016-03-28T17:43:35.000Z","categories":["CSS"]}},{"meta":{"id":"graceful-degradation-versus-progressive-enhancement","title":"“渐进增强”与“优雅降级”","date":"2016-03-25T09:35:10.000Z","categories":["Web Front-end"],"tags":["CSS3","User-Experience"]}},{"meta":{"id":"baidu-submit-for-wordpress-update-0-1-0","title":"Baidu Submit for WordPress update 0.1.0","date":"2016-03-21T13:38:04.000Z","categories":["CMS"],"tags":["PHP","SEO","Wordpress"]}},{"meta":{"id":"tasteless-chicken-soup","title":"过期鸡汤","date":"2016-03-02T14:02:12.000Z","categories":["Personal","Review"]}},{"meta":{"id":"baidu-submit-for-wordpress","title":"WordPress 百度主动提交工具","date":"2016-02-29T09:41:20.000Z","categories":["CMS"],"tags":["PHP","SEO","Wordpress"]}},{"meta":{"id":"review-of-the-monkey-king-2","title":"西游记之孙悟空三打白骨精","date":"2016-02-22T15:19:09.000Z","categories":["Personal","Review"]}},{"meta":{"id":"wordpress-unable-to-send-email-under-aliyun-virtual-host","title":"WordPress 在阿里云虚拟主机下无法发送邮件","date":"2016-02-22T11:16:24.000Z","categories":["CMS"],"tags":["PHP","Wordpress"]}},{"meta":{"id":"how-to-build-a-wordpress-blog","title":"WordPress 博客搭建","date":"2016-02-22T09:12:03.000Z","categories":["CMS"],"tags":["Wordpress"]}},{"meta":{"id":"idea-scrolling-issue","title":"IDEA 滚动条问题","date":"2016-02-17T14:43:31.000Z","categories":["IDE"],"tags":["IntelliJ-IDEA"]}},{"meta":{"id":"some-oddities-about-javascript","title":"JavaScript 的一些古怪之处","date":"2016-02-15T16:47:27.000Z","categories":["JavaScript"],"tags":["Error"]}},{"meta":{"id":"css-triangle","title":"CSS 绘制三角形","date":"2016-02-15T10:58:33.000Z","categories":["CSS"],"tags":["CSS3"]}},{"meta":{"id":"untitled-2","title":"无题","date":"2016-02-13T02:37:20.000Z","categories":["Personal"]}},{"meta":{"id":"domain-transfer","title":"域名转移","date":"2016-02-06T00:34:41.000Z","categories":["未分类"],"format":"status"}},{"meta":{"id":"using-idea-to-config-ftp-auto-deployment","title":"使用 IDEA 配置自动同步到FTP服务器","date":"2016-02-03T16:45:27.000Z","categories":["IDE"],"tags":["FTP","IntelliJ-IDEA"]}},{"meta":{"id":"wordpress-archives-page-implementation","title":"WordPress 文章归档页面实现","date":"2016-02-02T16:06:16.000Z","categories":["CMS"],"tags":["MySQL","PHP","Wordpress"]}},{"meta":{"id":"angular-router-note","title":"Angular Router 学习笔记","date":"2016-02-01T17:21:59.000Z","categories":["JavaScript"],"tags":["AngularJs","Router","SPA"]}},{"meta":{"id":"bootstrap-file-input-in-firefox","title":"Bootstrap file input in Firefox","date":"2016-01-22T09:20:46.000Z","categories":["CSS"],"tags":["Bootstrap","Firefox"]}},{"meta":{"id":"2015-annual-summary","title":"2015年度总结","date":"2016-01-12T16:08:16.000Z","categories":["Personal"]}},{"meta":{"id":"ie-cache-issue","title":"IE Cache Issue","date":"2016-01-06T17:12:47.000Z","categories":["Web Front-end"],"tags":["ExpressJs","IE","NodeJs"]}},{"meta":{"id":"mean-js-menu-service-extension","title":"MEAN.js Menu Service Extension","date":"2016-01-05T17:34:47.000Z","categories":["JavaScript"],"tags":["AngularJs","MEAN-Stack"]}},{"meta":{"id":"angular-tutorial-applying-animations","title":"Angular 教程：添加动画","date":"2015-12-29T16:00:39.000Z","categories":["JavaScript"],"tags":["AngularJs","Animation"]}},{"meta":{"id":"angular-tutorial-rest-and-custom-services","title":"Angular 教程：REST 和自定义服务","date":"2015-12-29T14:01:43.000Z","categories":["JavaScript"],"tags":["AngularJs","RESTful"]}},{"meta":{"id":"angular-tutorial-event-handlers","title":"Angular 教程：事件处理","date":"2015-12-29T11:35:25.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-filters","title":"Angular 教程：过滤器","date":"2015-12-29T09:12:33.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-more-templating","title":"Angular 教程：更多的模板","date":"2015-12-29T08:44:23.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-routing-and-multiple-views","title":"Angular 教程：多页面与路由","date":"2015-12-28T20:26:38.000Z","categories":["JavaScript"],"tags":["AngularJs","Router"]}},{"meta":{"id":"angular-tutorial-templating-links-and-images","title":"Angular 教程：模板化的链接与图片","date":"2015-12-28T15:46:08.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-xhrs-and-dependency-injection","title":"Angular 教程：异步加载和依赖注入","date":"2015-12-28T15:01:49.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-two-way-data-binding","title":"Angular 教程：双向绑定","date":"2015-12-26T18:01:24.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-filtering-repeaters","title":"Angular 教程：过滤循环器","date":"2015-12-25T17:09:58.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-angular-templates","title":"Angular 教程：动态模版","date":"2015-12-24T17:30:38.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-static-template","title":"Angular 教程：静态模版","date":"2015-12-23T17:52:43.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-bootstrapping","title":"Angular 教程：起步","date":"2015-12-22T09:10:52.000Z","categories":["JavaScript"],"tags":["AngularJs"]}},{"meta":{"id":"angular-tutorial-phonecat-tutorial-app","title":"Angular 教程：手机展示应用","date":"2015-12-21T09:04:01.000Z","categories":["JavaScript"],"tags":["AngularJs","NodeJs"]}},{"meta":{"id":"2048-game-base-on-jquery","title":"jQuery 写的 2048 小游戏","date":"2015-12-12T21:58:15.000Z","categories":["JavaScript"],"tags":["jQuery"]}},{"meta":{"id":"mean-js-note","title":"MEAN.js 学习笔记","date":"2015-12-10T16:35:33.000Z","categories":["JavaScript"],"tags":["AngularJs","ExpressJs","MEAN-Stack","MongoDB","NodeJs"]}},{"meta":{"id":"git-ssh-key-gen-and-gitextension-configuration","title":"Git SSH key 生成与 GitExtension 配置","date":"2015-12-08T16:26:07.000Z","categories":["VCS"],"tags":["Git"]}},{"meta":{"id":"matrix-chapter-10","title":"第十章","date":"2015-11-12T00:10:11.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-9","title":"第九章","date":"2015-11-01T18:13:12.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-8","title":"第八章","date":"2015-11-01T17:17:11.000Z","author":"loolorlar","categories":["母体"]}},{"meta":{"id":"matrix-chapter-7","title":"第七章","date":"2015-11-01T14:55:12.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-6","title":"第六章","date":"2015-11-01T01:03:13.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-5","title":"第五章","date":"2015-11-01T00:25:29.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-4","title":"第四章","date":"2015-10-31T23:44:44.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-3","title":"第三章","date":"2015-10-31T21:43:53.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-2","title":"第二章","date":"2015-10-30T02:10:42.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-1","title":"第一章","date":"2015-10-30T01:25:27.000Z","categories":["母体"]}},{"meta":{"id":"matrix-chapter-0","title":"楔子","date":"2015-10-29T02:13:44.000Z","categories":["母体"]}},{"meta":{"id":"first-mid-autumn-after-graduation","title":"毕业后的第一个中秋","date":"2015-09-23T21:29:36.000Z","categories":["Personal"]}},{"meta":{"id":"ext-usage-summary","title":"Ext 使用总结","date":"2015-09-19T15:36:18.000Z","categories":["JavaScript"],"tags":["ExtJs"]}},{"meta":{"id":"blog-migration","title":"博客迁移","date":"2015-09-18T21:20:51.000Z","categories":["未分类"]}},{"meta":{"id":"graduation","title":"毕业","date":"2015-06-09T01:09:40.000Z","views":["22"],"categories":["Personal"]}},{"meta":{"id":"paladitch-chapter-11","title":"第十一章","date":"2015-03-14T19:50:41.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-10","title":"第十章 · 绕指魔花","date":"2015-03-11T19:49:10.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"2014-11-11","title":"2014-11-11","date":"2014-11-11T20:44:32.000Z","categories":["Personal","Review"]}},{"meta":{"id":"nearing-the-duan-wu","title":"临近端午","date":"2014-05-29T20:46:52.000Z","categories":["Personal"]}},{"meta":{"id":"paladitch-chapter-9","title":"第九章 · 集会","date":"2014-03-03T19:47:32.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-8","title":"第八章 · 相逢","date":"2014-02-27T19:45:48.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-7","title":"第七章 · 梅尔","date":"2014-02-10T19:41:17.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-6","title":"第六章 · 早起的虫儿","date":"2014-02-04T19:32:35.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-5","title":"第五章 · 趣事（下）","date":"2014-02-01T19:28:23.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-4","title":"第四章 · 趣事（上）","date":"2014-01-31T19:23:53.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"2014-01-29","title":"2014-01-29","date":"2014-01-29T00:56:24.000Z","categories":["Personal"]}},{"meta":{"id":"2013-annual-summary","title":"2013 年终总结","date":"2013-12-25T23:47:45.000Z","categories":["Personal"]}},{"meta":{"id":"review-of-gravity","title":"地心引力","date":"2013-11-26T00:55:47.000Z","author":"wxsm","categories":["Personal"]}},{"meta":{"id":"some-memory","title":"留念","date":"2013-10-27T23:30:04.000Z","views":["18"],"categories":["Personal"]}},{"meta":{"id":"untitled","title":"无题","date":"2013-09-09T22:50:29.000Z","categories":["Personal"]}},{"meta":{"id":"story-of-shasha-and-kairui","title":"莎莎和凯瑞的故事","date":"2013-03-31T21:39:13.000Z","categories":["Others"]}},{"meta":{"id":"review-of-an-unexpected-journey","title":"意外之旅","date":"2013-02-27T01:26:36.000Z","categories":["Personal"]}},{"meta":{"id":"review-of-cp5","title":"仙五感想","date":"2013-02-13T11:25:31.000Z","author":"wxsm","categories":["Personal","Review"]}},{"meta":{"id":"not-feeling-good-recently","title":"最近状态不好","date":"2012-09-15T21:33:11.000Z","categories":["Personal"]}},{"meta":{"id":"long-long-ago","title":"多年","date":"2012-06-06T21:42:05.000Z","categories":["Others"]}},{"meta":{"id":"paladitch-chapter-3","title":"第三章","date":"2012-06-01T19:19:21.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-2","title":"第二章","date":"2012-05-23T19:11:14.000Z","categories":["圣骑士与女巫"]}},{"meta":{"id":"paladitch-chapter-1","title":"第一章 · 噩梦","date":"2012-05-21T19:43:09.000Z","categories":["圣骑士与女巫"]}}]