{"meta":{"id":"angular-tutorial-routing-and-multiple-views","title":"Angular 教程：多页面与路由","date":"2015-12-28T20:26:38.000Z","categories":["JavaScript"],"tags":["AngularJs","Router"]},"html":"<p>在这一步中，你将学习如何使用布局模版以及通过Angular的<code>ngRoute</code>模块来给应用添加路由功能。</p>\n<ul>\n<li>当你现在访问<code>app/index.html</code>的时候页面被重定向到了<code>app/index.html/#/phones</code>，并且手机列表将在此展示</li>\n<li>当你点击其中一条手机链接的时候，浏览器将显示一个手机详细信息页面，同时URL相应地更新</li>\n</ul>\n<p>最重要的改动如下所示。你可以在<a href=\"https://github.com/angular/angular-phonecat/compare/step-6...step-7\" title=\"See diff on Github\">GitHub</a>上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 role=\"anchor\">\n            <a name=\"依赖\" role=\"anchor\">依赖</a>\n          </h2><p>这一步中添加的路由功能是由Angular的<code>ngRoute</code>模块提供的，该模块没有包含在Angular框架的核心内容中。 我们使用<a href=\"http://bower.io/\">Bower</a>来安装客户端依赖。更新<code>bower.json</code>配置文件来包含新的依赖：</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"angular-phonecat\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"A starter project for AngularJS\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.0\"</span>,\n  <span class=\"hljs-attr\">\"homepage\"</span>: <span class=\"hljs-string\">\"https://github.com/angular/angular-phonecat\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"angular\"</span>: <span class=\"hljs-string\">\"1.4.x\"</span>,\n    <span class=\"hljs-attr\">\"angular-mocks\"</span>: <span class=\"hljs-string\">\"1.4.x\"</span>,\n    <span class=\"hljs-attr\">\"jquery\"</span>: <span class=\"hljs-string\">\"~2.1.1\"</span>,\n    <span class=\"hljs-attr\">\"bootstrap\"</span>: <span class=\"hljs-string\">\"~3.1.1\"</span>,\n    <span class=\"hljs-attr\">\"angular-route\"</span>: <span class=\"hljs-string\">\"1.4.x\"</span>\n  }\n}\n</code></pre><p>新的依赖项<code>&quot;angular-route&quot;: &quot;1.4.x&quot;</code>会告诉Bower去安装1.4.x版本的angular-route组件。我们必须使用Bower来下载以及安装该组件。 如果你已经全局安装了bower，你可以使用<code>bower install</code>指令。但在这个项目中我们有预设的指令来完成相同的事情：</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span>\n</code></pre><hr>\n<h2 role=\"anchor\">\n            <a name=\"多视图，路由以及布局模板\" role=\"anchor\">多视图，路由以及布局模板</a>\n          </h2><p>我们的应用慢慢地成长并开始变得复杂起来了。在这一步之前，应用提供给用户的只有一个视图（所有手机的列表），并且所有模板代码都在<code>index.html</code>文件中。现在我们将要给应用添加一个显示列表中手机细节的视图。</p>\n<p>为了添加细节视图，我们可以扩展<code>index.html</code>视图以包含新的模板代码，但这么做的话项目很快就会变得异常糟糕。所以我们将要做的是把<code>index.html</code>变成一个“布局模版”。这个模板可以理解为应用程序中所有其它模板的母版，至于其它的“局部模板”则将根据当前的“路由”（当前展示给用户的视图）选择性地加载到母版中来。</p>\n<p>Angular的应用路由是由<a href=\"https://docs.angularjs.org/api/ngRoute/provider/$routeProvider\">$routeProvider</a>声明的，它是<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route\">$route</a>服务的提供者。这个服务的目的是让控制器，视图模版以及当前浏览器URL地址之间的连接变得更简单一些。我们可以使用这个功能来实现<a href=\"http://en.wikipedia.org/wiki/Deep_linking\">深度链接</a>，从而允许用户使用浏览器的前进后退以及书签等功能。</p>\n<h2 role=\"anchor\">\n            <a name=\"依赖注入，注入器和提供者\" role=\"anchor\">依赖注入，注入器和提供者</a>\n          </h2><p>正如我们所知，依赖注入（DI）是AngularJS的核心，所以对其工作原理稍加理解是很有必要的。 在应用程序被引导的时候，Angular会创建一个注入器，它会寻找并且注入所有被应用程序所需求的服务。注入器本身完全不知道诸如<code>$http</code>或者<code>$route</code>的服务具体做了些什么。实际上，在被正确配置之前，注入器甚至不知道这些服务是否存在。 注入器只是按部就班地做了以下事情：</p>\n<ul>\n<li>读取应用所声明的模块</li>\n<li>注册所有在模块声明中定义的提供者（Provider）</li>\n<li>当需要的时候，给模块注入指定的函数以及任何需要的依赖（服务），它们将被提供者懒加载</li>\n</ul>\n<p>提供者是一个提供（创建）服务实例并且暴露配置接口以控制服务的创建过程与实际行为的对象。对于<code>$route</code>服务而言，<code>$routeProvider</code>暴露的API允许你为自己的应用定义路由。</p>\n<blockquote>\n<p>注意：提供者只能够注入到<code>config</code>函数内。因此你不能给<code>PhoneListCtrl</code>注入<code>$routeProvider</code></p>\n</blockquote>\n<p>Angular模块通过移除应用的全局状态以及提供配置注入器的方法来解决以上问题。与AMD或者require.js截然相反的是，Angular模块并没有尝试去解决脚本加载顺序以及脚本懒加载的问题。这些目标都是完全独立的，同时所有的模块系统都能共存并且实现它们的目标。 查看<a href=\"https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection\">理解依赖注入</a>来深入了解Angular的DI系统。</p>\n<hr>\n<h2 role=\"anchor\">\n            <a name=\"模板\" role=\"anchor\">模板</a>\n          </h2><p><code>$route</code>服务通常结合<a href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\">ngView</a>指令使用。<code>ngView</code>指令的作用是根据当前路由将视图模版加载到布局模板中去。</p>\n<blockquote>\n<p>注意：从Angular 1.2版本开始，<code>ngRoute</code>作为一个独立的模块，必须要额外加载<code>angular-route.js</code>文件，我们刚才已经通过Bower下载了它</p>\n</blockquote>\n<p><code>app/index.html</code>：</p>\n<pre><code><span class=\"hljs-meta\">&lt;!doctype html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span> <span class=\"hljs-attr\">ng-app</span>=<span class=\"hljs-string\">\"phonecatApp\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n...\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"bower_components/angular/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"bower_components/angular-route/angular-route.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/controllers.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ng-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们给index模板添加了两个<code>&lt;script&gt;</code>标签来为应用程序加载JavaScript文件：</p>\n<ul>\n<li><code>angular-route.js</code>：定义了Angular的<code>ngRoute</code>模块，它将给我们提供路由功能</li>\n<li><code>app.js</code>：这个文件现在将担任应用的路由模块</li>\n</ul>\n<p>需要注意的是我们把之前<code>index.html</code>模板中的大部分代码都移除了，取而代之的只有一个带有<code>ng-view</code>标签的div元素。移除的代码被移动到了<code>phone-list.html</code>模板中去：</p>\n<p><code>app/partials/phone-list.html</code>：</p>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container-fluid\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-2\"</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!--Sidebar content--&gt;</span>\n\n      Search: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ng-model</span>=<span class=\"hljs-string\">\"query\"</span>&gt;</span>\n      Sort by:\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">ng-model</span>=<span class=\"hljs-string\">\"orderProp\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>Alphabetical<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"age\"</span>&gt;</span>Newest<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-10\"</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!--Body content--&gt;</span>\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"phones\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">ng-repeat</span>=<span class=\"hljs-string\">\"phone in phones | filter:query | orderBy:orderProp\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"thumbnail\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#/phones/</span></span></span><span class=\"hljs-template-variable\">{{phone.id}}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"thumb\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">ng-src</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{{phone.imageUrl}}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#/phones/</span></span></span><span class=\"hljs-template-variable\">{{phone.id}}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span></span><span class=\"hljs-template-variable\">{{phone.name}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span></span><span class=\"hljs-template-variable\">{{phone.snippet}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre><p>同时我们给手机详细视图临时添加了一个简单的模板：</p>\n<p><code>app/partials/phone-detail.html</code>：</p>\n<pre><code><span class=\"xml\">TBD: detail view for <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span></span><span class=\"hljs-template-variable\">{{phoneId}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n</code></pre><p>需要注意的是我们使用了<code>phoneId</code>表达式，这将在<code>PhoneDetailCtrl</code>中定义。</p>\n<hr>\n<h2 role=\"anchor\">\n            <a name=\"App模块\" role=\"anchor\">App模块</a>\n          </h2><p>为了完善应用程序的架构，我们使用了<code>ngRoute</code>模块，并且将控制器都移动到了它们自己所属的模块<code>phonecatControllers</code>内（如下所示）。 我们给<code>index.html</code>添加了一个<code>angular-route.js</code>引用，同时在<code>controllers.js</code> 中创建了一个新的<code>phonecatControllers</code> 模块。但我们所要做的将不仅限于此。我们需要给应用添加模块依赖。通过在phonecatApp中列出这两个模块作为依赖，我们就可以使用它们提供的指令和服务了。</p>\n<p><code>app/js/app.js</code>：</p>\n<pre><code>var phonecatApp = angular.<span class=\"hljs-keyword\">module</span>(<span class=\"hljs-string\">'phonecatApp'</span>, [\n  <span class=\"hljs-string\">'ngRoute'</span>,\n  <span class=\"hljs-string\">'phonecatControllers'</span>\n]);\n\n...\n</code></pre><p>注意传入到<code>angular.module</code>方法中的第二个参数<code>[&#39;ngRoute&#39;, &#39;phonecatControllers&#39;]</code>，这个数组中列出的是<code>phonecatApp</code>将要依赖到的模块。</p>\n<pre><code>...\n\n<span class=\"hljs-selector-tag\">phonecatApp</span><span class=\"hljs-selector-class\">.config</span>([<span class=\"hljs-string\">'$routeProvider'</span>,\n  function($routeProvider) {\n    $<span class=\"hljs-selector-tag\">routeProvider</span>.\n      <span class=\"hljs-keyword\">when</span>(<span class=\"hljs-string\">'/phones'</span>, {\n        <span class=\"hljs-attribute\">templateUrl</span>: <span class=\"hljs-string\">'partials/phone-list.html'</span>,\n        <span class=\"hljs-attribute\">controller</span>: <span class=\"hljs-string\">'PhoneListCtrl'</span>\n      }).\n      <span class=\"hljs-keyword\">when</span>(<span class=\"hljs-string\">'/phones/:phoneId'</span>, {\n        <span class=\"hljs-attribute\">templateUrl</span>: <span class=\"hljs-string\">'partials/phone-detail.html'</span>,\n        <span class=\"hljs-attribute\">controller</span>: <span class=\"hljs-string\">'PhoneDetailCtrl'</span>\n      }).\n      otherwise({\n        <span class=\"hljs-attribute\">redirectTo</span>: <span class=\"hljs-string\">'/phones'</span>\n      });\n  }]);\n</code></pre><p>在<code>phonecatApp.config()</code>方法中，我们请求给配置方法注入<code>$routeProvider</code>，并使用<code>$routeProvider.when()</code>方法来定义我们的路由。 我们的应用路由定义如下：</p>\n<ul>\n<li><code>when(&#39;/phones&#39;)</code>：当URL匹配到<code>/phones</code>时，页面将会显示手机列表视图。Angular会使用<code>phone-list.html</code>模板和<code>PhoneListCtrl</code>控制器来构造这个它</li>\n<li><code>when(&#39;/phones/:phoneId&#39;)</code>：当URL匹配到<code>/phones/:phoneId</code>（<code>:phoneId</code>是URL的一个参数）时，页面将会显示手机详细视图。 Angular会使用<code>phone-detail.html</code>模板和<code>PhoneDetailCtrl</code>来构造它</li>\n<li><code>otherwise({redirectTo: &#39;/phones&#39;})</code>：当浏览器地址没有匹配上我们定义的路由时重定向到<code>/phones</code></li>\n</ul>\n<p>我们复用了在前面的教程中构建的<code>PhoneListCtrl</code>控制器，并且在<code>app/js/controllers.js</code>文件中为手机详细视图创建了一个空白的<code>PhoneDetailCtrl</code>控制器。 注意在第二条路由定义中使用到的<code>:phoneId</code>参数。<code>$route</code>服务会将<code>/phones/:phoneId</code>声明当成一个模板来使用。所有使用<code>:</code>前缀声明的变量都会被提取到<code>$routeParams</code>对象中去。</p>\n<hr>\n<h2 role=\"anchor\">\n            <a name=\"控制器\" role=\"anchor\">控制器</a>\n          </h2><p><code>app/js/controllers.js</code>：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> phonecatControllers = angular.module(<span class=\"hljs-string\">'phonecatControllers'</span>, []);\n\nphonecatControllers.controller(<span class=\"hljs-string\">'PhoneListCtrl'</span>, [<span class=\"hljs-string\">'$scope'</span>, <span class=\"hljs-string\">'$http'</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, $http)</span> </span>{\n    $http.get(<span class=\"hljs-string\">'phones/phones.json'</span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data)</span> </span>{\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = <span class=\"hljs-string\">'age'</span>;\n  }]);\n\nphonecatControllers.controller(<span class=\"hljs-string\">'PhoneDetailCtrl'</span>, [<span class=\"hljs-string\">'$scope'</span>, <span class=\"hljs-string\">'$routeParams'</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($scope, $routeParams)</span> </span>{\n    $scope.phoneId = $routeParams.phoneId;\n  }]);\n</code></pre><p>注意到我们创建了一个名为<code>phonecatControllers</code>的新模块。对一些小型AngularJS应用而言或许一个模块就够用了，但是随着应用的增长，将代码重构到不同的模块中去是非常普遍的做法。对大型应用来说，你很可能会为应用的每一个主要功能都创建不同的模块。 因为我们的教学应用相对来说比较小，所以我们把所有的控制器添加到<code>phonecatControllers</code>模块中就完事了。</p>\n<hr>\n<h2 role=\"anchor\">\n            <a name=\"测试\" role=\"anchor\">测试</a>\n          </h2><p>为了验证应用的正确性，我们编写了一些端到端测试来验证当URL发生变化时应用是否渲染了正确的视图。</p>\n<pre><code>...\n   it(<span class=\"hljs-string\">'should redirect index.html to index.html#/phones'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n    browser.get(<span class=\"hljs-string\">'app/index.html'</span>);\n    browser.getLocationAbsUrl().<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(url)</span></span> {\n        expect(url).toEqual(<span class=\"hljs-string\">'/phones'</span>);\n      });\n  });\n\n  describe(<span class=\"hljs-string\">'Phone list view'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n      browser.get(<span class=\"hljs-string\">'app/index.html#/phones'</span>);\n    });\n...\n\n  describe(<span class=\"hljs-string\">'Phone detail view'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n      browser.get(<span class=\"hljs-string\">'app/index.html#/phones/nexus-s'</span>);\n    });\n\n\n    it(<span class=\"hljs-string\">'should display placeholder page with phoneId'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span> {\n      expect(element(by.binding(<span class=\"hljs-string\">'phoneId'</span>)).getText()).toBe(<span class=\"hljs-string\">'nexus-s'</span>);\n    });\n  });\n</code></pre><p>你可以通过执行<code>npm run protractor</code>来观察测试运行</p>\n<h2 role=\"anchor\">\n            <a name=\"课外扩展\" role=\"anchor\">课外扩展</a>\n          </h2><p>尝试给<code>index.html</code>添加一个<code>{{orderProp}}</code>绑定，你会发现即使正处在手机列表视图中它也没有引发任何改变。这是因为<code>orderProp</code>模型只在<code>PhoneListCtrl</code>管理的作用域中可见。如果你把同样的绑定添加到<code>phone-list.html</code>模板内它就会如预期一般地工作了。</p>\n<h2 role=\"anchor\">\n            <a name=\"总结\" role=\"anchor\">总结</a>\n          </h2><p>既然已经设置好了路由与手机列表视图，我们就可以准备通过<a href=\"/p/angular-tutorial-more-templating/\">step 8</a>来实现详细视图了。</p>\n"}