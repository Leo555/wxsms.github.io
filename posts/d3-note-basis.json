{"meta":{"id":"d3-note-basis","title":"D3 Note - Basis","date":"2016-10-25T10:40:44.000Z","categories":["JavaScript"],"tags":["D3"]},"html":"<p>D3 (Data-Driven Documents) 是一个 JavaScript Library，用来做 Web 端的数据可视化实现以及各种绘图。</p>\n<blockquote>\n<p><strong>D3.js</strong> is a JavaScript library for manipulating documents based on data. <strong>D3</strong> helps you bring data to life using HTML, SVG, and CSS.</p>\n</blockquote>\n<p>学习 D3 需要很多预备知识：</p>\n<ol>\n<li>HTML / DOM</li>\n<li>CSS</li>\n<li>JavaScript (better with jQuery)</li>\n<li>SVG</li>\n</ol>\n<p>HTML / CSS 不必多说，因为 D3 含有大量链式操作函数以及选择器等，因此如果有 jQuery 基础将轻松很多。此外，由于一般采用 SVG 方式进行绘图，所以 SVG 基础知识也需要掌握。</p>\n<p>虽然必须的预备知识如此之多，但 D3 的定位其实是 Web 前端绘图的底层工具，所谓底层，即是操作复杂而功能强大者。</p>\n<!--more-->\n<h2>\n            <a name=\"关于-SVG\" role=\"anchor\">\n              <span>关于 SVG</span>\n            </a>\n          </h2><p>SVG (Scalable Vector Graphics) 是一种绘图标准，已经被绝大多数的现代浏览器所支持。SVG 采用 XML 语法定义图像，可直接嵌入 HTML 中使用。</p>\n<p>SVG 的特点是矢量绘图（与 Canvas 不同），除了预设样式以外同时也支持 CSS 样式。</p>\n<p>比如，画一个园圈，坐标为 (100, 50)，半径为 40px，拥有 2px 的黑色 border，以及红色填充：</p>\n<pre><code>&lt;svg&gt;\n    &lt;<span class=\"hljs-built_in\">circle</span> cx=<span class=\"hljs-string\">\"100\"</span> cy=<span class=\"hljs-string\">\"50\"</span> r=<span class=\"hljs-string\">\"40\"</span> <span class=\"hljs-built_in\">stroke</span>=<span class=\"hljs-string\">\"black\"</span> <span class=\"hljs-built_in\">stroke</span>-<span class=\"hljs-built_in\">width</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-built_in\">fill</span>=<span class=\"hljs-string\">\"red\"</span>/&gt;\n&lt;/svg&gt;\n</code></pre><p>SVG 有一些预定义的形状元素，可被开发者使用和操作：</p>\n<ul>\n<li>矩形 <rect></li>\n<li>圆形 <circle></li>\n<li>椭圆 <ellipse></li>\n<li>线 <line></li>\n<li>折线 <polyline></li>\n<li>多边形 <polygon></li>\n<li>路径 <path></li>\n</ul>\n<p>其中，<code>path</code> 是功能最强大者，使用 <code>path</code> 可以构成所有图形。</p>\n<h2>\n            <a name=\"选择器\" role=\"anchor\">\n              <span>选择器</span>\n            </a>\n          </h2><h3>\n            <a name=\"选择元素\" role=\"anchor\">\n              <span>选择元素</span>\n            </a>\n          </h3><p>D3 使用与 jQuery 类似的选择器来获取 HTML 元素。常用的方法有：</p>\n<ul>\n<li><code>d3.select(selector)</code></li>\n<li><code>d3.selectAll(selector)</code></li>\n</ul>\n<p>（参数既可以传 selector 也可以直接传 HTML Element ）</p>\n<p>顾名思义，<code>selectAll</code> 就是选择所有符合条件的元素了，那么 <code>select</code> 选择的是符合条件的第一个元素。如：</p>\n<pre><code><span class=\"hljs-selector-tag\">d3</span><span class=\"hljs-selector-class\">.select</span>(<span class=\"hljs-string\">'body'</span>) <span class=\"hljs-comment\">//选择 body 元素</span>\n\n<span class=\"hljs-selector-tag\">d3</span><span class=\"hljs-selector-class\">.selectAll</span>(<span class=\"hljs-string\">'p'</span>) <span class=\"hljs-comment\">//选择所有 p 元素</span>\n\n<span class=\"hljs-selector-tag\">d3</span><span class=\"hljs-selector-class\">.selectAll</span>(<span class=\"hljs-string\">'.className'</span>) <span class=\"hljs-comment\">//选择所有 class 包含 className 的元素</span>\n</code></pre><p>更多就不说了。</p>\n<h3>\n            <a name=\"操作选择\" role=\"anchor\">\n              <span>操作选择</span>\n            </a>\n          </h3><p>选择器返回的是一组<strong>选择</strong>（selection），这组<strong>选择</strong>可以进行一些操作，如：</p>\n<ul>\n<li>在此选择的基础上继续选择；</li>\n<li>改变属性；</li>\n<li>改变样式；</li>\n<li>绑定事件；</li>\n<li>插入、删除；</li>\n<li>绑定数据。</li>\n</ul>\n<p>大多数操作都与 jQuery 十分类似，同时也支持链式操作，不再赘述。只是这个“绑定数据”操作稍有特别。</p>\n<h2>\n            <a name=\"数据绑定\" role=\"anchor\">\n              <span>数据绑定</span>\n            </a>\n          </h2><p>通过 D3 可以把数据“绑定”到 HTML 元素上，绑定的目的主要是为了方便一些需要相应数据才能进行的元素操作（如：更改元素大小、位置等）。</p>\n<p>绑定数据有两个方法：</p>\n<ul>\n<li><code>datum</code>: 将一个数据绑定到选择上；</li>\n<li><code>data</code>: 将一个数组绑定到选择上，数组的各项分别与选择的各项一一对应。</li>\n</ul>\n<p>下面引用一个例子来说明这二者的不同。假设有如下三个节点：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Apple<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Pear<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Banana<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><h3>\n            <a name=\"datum\" role=\"anchor\">\n              <span>datum</span>\n            </a>\n          </h3><p>执行以下代码：</p>\n<pre><code><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'datum'</span>;\n<span class=\"hljs-keyword\">let</span> p = d3.selectAll(<span class=\"hljs-string\">'p'</span>);\n\np.datum(str);\np.text(<span class=\"hljs-function\">(<span class=\"hljs-params\">d, i</span>) =&gt;</span> <span class=\"hljs-string\">`Element <span class=\"hljs-subst\">${i}</span> bind with <span class=\"hljs-subst\">${d}</span>`</span>);\n</code></pre><p>将得到：</p>\n<pre><code><span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">0</span> bind <span class=\"hljs-keyword\">with</span> datum\n<span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">1</span> bind <span class=\"hljs-keyword\">with</span> datum\n<span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">2</span> bind <span class=\"hljs-keyword\">with</span> datum\n</code></pre><p>在对选择进行操作时，传入的<strong>值</strong>可以是<strong>值</strong>，也可以是函数。当传入函数时，D3 会向函数注入两个参数，分别是 d (data) 与 i (index)，代表当前元素绑定的数据与其索引。</p>\n<h3>\n            <a name=\"data\" role=\"anchor\">\n              <span>data</span>\n            </a>\n          </h3><p>执行以下代码：</p>\n<pre><code><span class=\"hljs-keyword\">let</span> strArr = [<span class=\"hljs-string\">'data0'</span>, <span class=\"hljs-string\">'data1'</span>, <span class=\"hljs-string\">'data2'</span>];\n<span class=\"hljs-keyword\">let</span> p = d3.selectAll(<span class=\"hljs-string\">'p'</span>);\n\np.data(strArr);\np.text(<span class=\"hljs-function\">(<span class=\"hljs-params\">d, i</span>) =&gt;</span> <span class=\"hljs-string\">`Element <span class=\"hljs-subst\">${i}</span> bind with <span class=\"hljs-subst\">${d}</span>`</span>);\n</code></pre><p>将得到：</p>\n<pre><code><span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">0</span> bind <span class=\"hljs-keyword\">with</span> data0\n<span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">1</span> bind <span class=\"hljs-keyword\">with</span> data1\n<span class=\"hljs-built_in\">Element</span> <span class=\"hljs-number\">2</span> bind <span class=\"hljs-keyword\">with</span> data2\n</code></pre><p>可以看到，数组中的 3 个项分别与 3 个 p 元素绑定到了一起。因此，可以将 <code>datum</code> 看作是 <code>data</code> 函数的一个特例，实际开发中使用更多的是 <code>data</code> 函数。</p>\n<h2>\n            <a name=\"实践：简单柱状图\" role=\"anchor\">\n              <span>实践：简单柱状图</span>\n            </a>\n          </h2><p>先定义一个 SVG 画布，并将它插入到 HTML 的 body 中去：</p>\n<pre><code><span class=\"hljs-built_in\">let</span> <span class=\"hljs-built_in\">width</span> = <span class=\"hljs-number\">300</span>,\n  <span class=\"hljs-built_in\">height</span> = <span class=\"hljs-number\">300</span>；\n\n<span class=\"hljs-built_in\">let</span> svg = d3.select('body')\n  .<span class=\"hljs-built_in\">append</span>('svg')\n  .attr('<span class=\"hljs-built_in\">width</span>', <span class=\"hljs-built_in\">width</span>)\n  .attr('<span class=\"hljs-built_in\">height</span>', <span class=\"hljs-built_in\">height</span>);\n</code></pre><p>在这里，画布的宽高都为 300 像素。</p>\n<p>然后，定义一组数据：</p>\n<pre><code>let data = [<span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">210</span>, <span class=\"hljs-number\">170</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">190</span>];\n</code></pre><p>最后使用以上数据画出柱状图，柱子使用 SVG 预定义的 <code>rect</code> 元素：</p>\n<pre><code>let rectWidth = <span class=\"hljs-number\">25</span>;\n\nsvg.selectAll(<span class=\"hljs-string\">'rect'</span>)\n .data(data)\n .enter()\n .append(<span class=\"hljs-string\">'rect'</span>)\n .attr(<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(d, i)</span> =&gt;</span> height - d)\n .attr(<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(d, i)</span> =&gt;</span> i * rectWidth)\n .attr(<span class=\"hljs-string\">'height'</span>, d =&gt; d)\n .attr(<span class=\"hljs-string\">'width'</span>, rectWidth - <span class=\"hljs-number\">2</span>)\n .attr(<span class=\"hljs-string\">'fill'</span>, <span class=\"hljs-string\">'steelblue'</span>);\n</code></pre><p><code>rectWidth</code> 表示柱子的宽度，至于坐标、宽高则分别通过 x / y 以及 height / width 属性来控制，效果如下：</p>\n<p><img src=\"http://7xjbxm.com1.z0.glb.clouddn.com/d3-chart.gif\" alt=\"\"></p>\n<p>可以发现，这里并没有指定需要插入的 <code>rect</code> 个数，但 D3 却根据数据量自动地把图画出来了，这个工作是通过 <code>enter</code> 语句完成的。关于其工作原理，下回分解。</p>\n"}